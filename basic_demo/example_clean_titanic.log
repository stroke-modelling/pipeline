INFO:pipeline:
INFO:pipeline:#################################
INFO:pipeline:##### Titanic data cleaning #####
INFO:pipeline:#################################
INFO:pipeline:
INFO:pipeline:* Import raw data.
INFO:pipeline:------------------
INFO:pipeline:Store a name for this object in its attrs dict or as Series name.
INFO:pipeline:Run this function:
INFO:pipeline:  utils.log.set_attrs_name(
INFO:pipeline:    obj: <built-in function any>,
INFO:pipeline:    obj_name: str
INFO:pipeline:  )
INFO:pipeline:With these parameters:
INFO:pipeline:  obj={unnamed pd.DataFrame},
INFO:pipeline:  obj_name=raw data,
INFO:pipeline:
INFO:pipeline:Giving the following as output:
INFO:pipeline:  raw data
INFO:pipeline:
INFO:pipeline:* Check for missing data.
INFO:pipeline:-------------------------
INFO:pipeline:Find number of missing entries in each column of DataFrame.
INFO:pipeline:Run this function:
INFO:pipeline:  utils.clean.check_for_missing_data(
INFO:pipeline:    df: pandas.core.frame.DataFrame
INFO:pipeline:  )
INFO:pipeline:With these parameters:
INFO:pipeline:  df=raw data,
INFO:pipeline:
INFO:pipeline:Giving the following as output:
INFO:pipeline:  missing_data
INFO:pipeline:
INFO:pipeline:* Set up cleaned output DataFrame.
INFO:pipeline:----------------------------------
INFO:pipeline:Store a name for this object in its attrs dict or as Series name.
INFO:pipeline:Run this function:
INFO:pipeline:  utils.log.set_attrs_name(
INFO:pipeline:    obj: <built-in function any>,
INFO:pipeline:    obj_name: str
INFO:pipeline:  )
INFO:pipeline:With these parameters:
INFO:pipeline:  obj={unnamed pd.DataFrame},
INFO:pipeline:  obj_name=cleaned data,
INFO:pipeline:
INFO:pipeline:Giving the following as output:
INFO:pipeline:  cleaned data
INFO:pipeline:
INFO:pipeline:* Update cleaned dataframe.
INFO:pipeline:---------------------------
INFO:pipeline:<class 'pandas.core.frame.DataFrame'>
INFO:pipeline:RangeIndex: 891 entries, 0 to 890
INFO:pipeline:Data columns (total 7 columns):
INFO:pipeline: #   Column       Non-Null Count  Dtype  
INFO:pipeline:---  ------       --------------  -----  
INFO:pipeline: 0   PassengerId  891 non-null    int64  
INFO:pipeline: 1   Survived     891 non-null    int64  
INFO:pipeline: 2   Pclass       891 non-null    int64  
INFO:pipeline: 3   Age          714 non-null    float64
INFO:pipeline: 4   SibSp        891 non-null    int64  
INFO:pipeline: 5   Parch        891 non-null    int64  
INFO:pipeline: 6   Fare         891 non-null    float64
INFO:pipeline:dtypes: float64(2), int64(5)
INFO:pipeline:
INFO:pipeline:################################
INFO:pipeline:##### Process Titanic data #####
INFO:pipeline:################################
INFO:pipeline:
INFO:pipeline:* Sex: change male/female to 1/0.
INFO:pipeline:---------------------------------
INFO:pipeline:Make a copy of a pd.Series with the values renamed.
INFO:pipeline:Run this function:
INFO:pipeline:  utils.clean.rename_values(
INFO:pipeline:    series: pandas.core.series.Series,
INFO:pipeline:    dict_map: dict
INFO:pipeline:  )
INFO:pipeline:With these parameters:
INFO:pipeline:  series=Sex,
INFO:pipeline:  dict_map={'male': True, 'female': False},
INFO:pipeline:
INFO:pipeline:Giving the following as output:
INFO:pipeline:  Sex
INFO:pipeline:
INFO:pipeline:* Update cleaned dataframe.
INFO:pipeline:---------------------------
INFO:pipeline:<class 'pandas.core.frame.DataFrame'>
INFO:pipeline:RangeIndex: 891 entries, 0 to 890
INFO:pipeline:Data columns (total 8 columns):
INFO:pipeline: #   Column       Non-Null Count  Dtype  
INFO:pipeline:---  ------       --------------  -----  
INFO:pipeline: 0   PassengerId  891 non-null    int64  
INFO:pipeline: 1   Survived     891 non-null    int64  
INFO:pipeline: 2   Pclass       891 non-null    int64  
INFO:pipeline: 3   Age          714 non-null    float64
INFO:pipeline: 4   SibSp        891 non-null    int64  
INFO:pipeline: 5   Parch        891 non-null    int64  
INFO:pipeline: 6   Fare         891 non-null    float64
INFO:pipeline: 7   Male         891 non-null    bool   
INFO:pipeline:dtypes: bool(1), float64(2), int64(5)
INFO:pipeline:
INFO:pipeline:* Age: impute missing values with median.
INFO:pipeline:-----------------------------------------
INFO:pipeline:Replace missing values in a Pandas series with median.
INFO:pipeline:Run this function:
INFO:pipeline:  utils.clean.impute_missing_with_median(
INFO:pipeline:    _series: pandas.core.series.Series
INFO:pipeline:  )
INFO:pipeline:With these parameters:
INFO:pipeline:  _series=Age,
INFO:pipeline:
INFO:pipeline:Giving the following as output:
INFO:pipeline:  imputed_with_median,
INFO:pipeline:  missing_bool
INFO:pipeline:
INFO:pipeline:* Update cleaned dataframe.
INFO:pipeline:---------------------------
INFO:pipeline:<class 'pandas.core.frame.DataFrame'>
INFO:pipeline:RangeIndex: 891 entries, 0 to 890
INFO:pipeline:Data columns (total 9 columns):
INFO:pipeline: #   Column       Non-Null Count  Dtype  
INFO:pipeline:---  ------       --------------  -----  
INFO:pipeline: 0   PassengerId  891 non-null    int64  
INFO:pipeline: 1   Survived     891 non-null    int64  
INFO:pipeline: 2   Pclass       891 non-null    int64  
INFO:pipeline: 3   Age          891 non-null    float64
INFO:pipeline: 4   SibSp        891 non-null    int64  
INFO:pipeline: 5   Parch        891 non-null    int64  
INFO:pipeline: 6   Fare         891 non-null    float64
INFO:pipeline: 7   Male         891 non-null    bool   
INFO:pipeline: 8   AgeImputed   891 non-null    bool   
INFO:pipeline:dtypes: bool(2), float64(2), int64(5)
INFO:pipeline:
INFO:pipeline:* Embarked: impute missing values with label.
INFO:pipeline:---------------------------------------------
INFO:pipeline:Replace missing values in a Pandas series with the text 'missing'
INFO:pipeline:Run this function:
INFO:pipeline:  utils.clean.impute_missing_with_missing_label(
INFO:pipeline:    _series: pandas.core.series.Series,
INFO:pipeline:    label: str = 'missing'
INFO:pipeline:  )
INFO:pipeline:With these parameters:
INFO:pipeline:  _series=Embarked,
INFO:pipeline:  label=missing,
INFO:pipeline:
INFO:pipeline:Giving the following as output:
INFO:pipeline:  imputed_with_missing_label,
INFO:pipeline:  missing_bool
INFO:pipeline:
INFO:pipeline:* Embarked: one-hot-encode.
INFO:pipeline:---------------------------
INFO:pipeline:Convert a single column to several one-hot encoded columns.
INFO:pipeline:Run this function:
INFO:pipeline:  utils.clean.apply_one_hot_encoding(
INFO:pipeline:    series: pandas.core.series.Series,
INFO:pipeline:    **kwargs
INFO:pipeline:  )
INFO:pipeline:With these parameters:
INFO:pipeline:  series=imputed_with_missing_label,
INFO:pipeline:
INFO:pipeline:Giving the following as output:
INFO:pipeline:  ohe
INFO:pipeline:
INFO:pipeline:* Update cleaned dataframe.
INFO:pipeline:---------------------------
INFO:pipeline:<class 'pandas.core.frame.DataFrame'>
INFO:pipeline:RangeIndex: 891 entries, 0 to 890
INFO:pipeline:Data columns (total 14 columns):
INFO:pipeline: #   Column            Non-Null Count  Dtype  
INFO:pipeline:---  ------            --------------  -----  
INFO:pipeline: 0   PassengerId       891 non-null    int64  
INFO:pipeline: 1   Survived          891 non-null    int64  
INFO:pipeline: 2   Pclass            891 non-null    int64  
INFO:pipeline: 3   Age               891 non-null    float64
INFO:pipeline: 4   SibSp             891 non-null    int64  
INFO:pipeline: 5   Parch             891 non-null    int64  
INFO:pipeline: 6   Fare              891 non-null    float64
INFO:pipeline: 7   Male              891 non-null    bool   
INFO:pipeline: 8   AgeImputed        891 non-null    bool   
INFO:pipeline: 9   Embarked_C        891 non-null    bool   
INFO:pipeline: 10  Embarked_Q        891 non-null    bool   
INFO:pipeline: 11  Embarked_S        891 non-null    bool   
INFO:pipeline: 12  Embarked_missing  891 non-null    bool   
INFO:pipeline: 13  EmbarkedImputed   891 non-null    bool   
INFO:pipeline:dtypes: bool(7), float64(2), int64(5)
INFO:pipeline:
INFO:pipeline:* Cabin: split multiple entries.
INFO:pipeline:--------------------------------
INFO:pipeline:Split column strings by a delimiter, store in multiple columns.
INFO:pipeline:Run this function:
INFO:pipeline:  utils.clean.split_strings_to_columns_by_delimiter(
INFO:pipeline:    series: pandas.core.series.Series,
INFO:pipeline:    delimiter: str = ',
INFO:pipeline:    '
INFO:pipeline:  )
INFO:pipeline:With these parameters:
INFO:pipeline:  series=Cabin,
INFO:pipeline:  delimiter= ,
INFO:pipeline:
INFO:pipeline:Giving the following as output:
INFO:pipeline:  raw data
INFO:pipeline:Only keep the first cabin entry.
INFO:pipeline:
INFO:pipeline:* Cabin: split letters and numbers.
INFO:pipeline:-----------------------------------
INFO:pipeline:Split column strings at given indices, store in multiple columns.
INFO:pipeline:Run this function:
INFO:pipeline:  utils.clean.split_strings_to_columns_by_index(
INFO:pipeline:    series: pandas.core.series.Series,
INFO:pipeline:    split_index: 'int | list'
INFO:pipeline:  )
INFO:pipeline:With these parameters:
INFO:pipeline:  series=Cabin_0,
INFO:pipeline:  split_index=1,
INFO:pipeline:
INFO:pipeline:Giving the following as output:
INFO:pipeline:  {unnamed pd.DataFrame}
INFO:pipeline:
INFO:pipeline:* Cabin letter: impute missing values.
INFO:pipeline:--------------------------------------
INFO:pipeline:Replace missing values in a Pandas series with the text 'missing'
INFO:pipeline:Run this function:
INFO:pipeline:  utils.clean.impute_missing_with_missing_label(
INFO:pipeline:    _series: pandas.core.series.Series,
INFO:pipeline:    label: str = 'missing'
INFO:pipeline:  )
INFO:pipeline:With these parameters:
INFO:pipeline:  _series=CabinLetter,
INFO:pipeline:  label=missing,
INFO:pipeline:
INFO:pipeline:Giving the following as output:
INFO:pipeline:  imputed_with_missing_label,
INFO:pipeline:  missing_bool
INFO:pipeline:
INFO:pipeline:* Cabin number: impute missing values.
INFO:pipeline:--------------------------------------
INFO:pipeline:Replace missing values in a Pandas series with the text 'missing'
INFO:pipeline:Run this function:
INFO:pipeline:  utils.clean.impute_missing_with_missing_label(
INFO:pipeline:    _series: pandas.core.series.Series,
INFO:pipeline:    label: str = 'missing'
INFO:pipeline:  )
INFO:pipeline:With these parameters:
INFO:pipeline:  _series=CabinNumber,
INFO:pipeline:  label=0,
INFO:pipeline:
INFO:pipeline:Giving the following as output:
INFO:pipeline:  imputed_with_missing_label,
INFO:pipeline:  missing_bool
INFO:pipeline:Convert dtype to int:
INFO:pipeline:
INFO:pipeline:* Cabin letter: one-hot-encode.
INFO:pipeline:-------------------------------
INFO:pipeline:Convert a single column to several one-hot encoded columns.
INFO:pipeline:Run this function:
INFO:pipeline:  utils.clean.apply_one_hot_encoding(
INFO:pipeline:    series: pandas.core.series.Series,
INFO:pipeline:    **kwargs
INFO:pipeline:  )
INFO:pipeline:With these parameters:
INFO:pipeline:  series=imputed_with_missing_label,
INFO:pipeline:
INFO:pipeline:Giving the following as output:
INFO:pipeline:  ohe
INFO:pipeline:
INFO:pipeline:* Update cleaned dataframe.
INFO:pipeline:---------------------------
INFO:pipeline:<class 'pandas.core.frame.DataFrame'>
INFO:pipeline:RangeIndex: 891 entries, 0 to 890
INFO:pipeline:Data columns (total 26 columns):
INFO:pipeline: #   Column               Non-Null Count  Dtype  
INFO:pipeline:---  ------               --------------  -----  
INFO:pipeline: 0   PassengerId          891 non-null    int64  
INFO:pipeline: 1   Survived             891 non-null    int64  
INFO:pipeline: 2   Pclass               891 non-null    int64  
INFO:pipeline: 3   Age                  891 non-null    float64
INFO:pipeline: 4   SibSp                891 non-null    int64  
INFO:pipeline: 5   Parch                891 non-null    int64  
INFO:pipeline: 6   Fare                 891 non-null    float64
INFO:pipeline: 7   Male                 891 non-null    bool   
INFO:pipeline: 8   AgeImputed           891 non-null    bool   
INFO:pipeline: 9   Embarked_C           891 non-null    bool   
INFO:pipeline: 10  Embarked_Q           891 non-null    bool   
INFO:pipeline: 11  Embarked_S           891 non-null    bool   
INFO:pipeline: 12  Embarked_missing     891 non-null    bool   
INFO:pipeline: 13  EmbarkedImputed      891 non-null    bool   
INFO:pipeline: 14  CabinLetter_A        891 non-null    bool   
INFO:pipeline: 15  CabinLetter_B        891 non-null    bool   
INFO:pipeline: 16  CabinLetter_C        891 non-null    bool   
INFO:pipeline: 17  CabinLetter_D        891 non-null    bool   
INFO:pipeline: 18  CabinLetter_E        891 non-null    bool   
INFO:pipeline: 19  CabinLetter_F        891 non-null    bool   
INFO:pipeline: 20  CabinLetter_G        891 non-null    bool   
INFO:pipeline: 21  CabinLetter_T        891 non-null    bool   
INFO:pipeline: 22  CabinLetter_missing  891 non-null    bool   
INFO:pipeline: 23  CabinLetterImputed   891 non-null    bool   
INFO:pipeline: 24  CabinNumber          891 non-null    int64  
INFO:pipeline: 25  CabinNumberImputed   891 non-null    bool   
INFO:pipeline:dtypes: bool(18), float64(2), int64(6)
INFO:pipeline:
INFO:pipeline:##################
INFO:pipeline:##### Result #####
INFO:pipeline:##################
INFO:pipeline:
INFO:pipeline:* Contents of cleaned dataframe.
INFO:pipeline:--------------------------------
INFO:pipeline:<class 'pandas.core.frame.DataFrame'>
INFO:pipeline:RangeIndex: 891 entries, 0 to 890
INFO:pipeline:Data columns (total 26 columns):
INFO:pipeline: #   Column               Non-Null Count  Dtype  
INFO:pipeline:---  ------               --------------  -----  
INFO:pipeline: 0   PassengerId          891 non-null    int64  
INFO:pipeline: 1   Survived             891 non-null    int64  
INFO:pipeline: 2   Pclass               891 non-null    int64  
INFO:pipeline: 3   Age                  891 non-null    float64
INFO:pipeline: 4   SibSp                891 non-null    int64  
INFO:pipeline: 5   Parch                891 non-null    int64  
INFO:pipeline: 6   Fare                 891 non-null    float64
INFO:pipeline: 7   Male                 891 non-null    bool   
INFO:pipeline: 8   AgeImputed           891 non-null    bool   
INFO:pipeline: 9   Embarked_C           891 non-null    bool   
INFO:pipeline: 10  Embarked_Q           891 non-null    bool   
INFO:pipeline: 11  Embarked_S           891 non-null    bool   
INFO:pipeline: 12  Embarked_missing     891 non-null    bool   
INFO:pipeline: 13  EmbarkedImputed      891 non-null    bool   
INFO:pipeline: 14  CabinLetter_A        891 non-null    bool   
INFO:pipeline: 15  CabinLetter_B        891 non-null    bool   
INFO:pipeline: 16  CabinLetter_C        891 non-null    bool   
INFO:pipeline: 17  CabinLetter_D        891 non-null    bool   
INFO:pipeline: 18  CabinLetter_E        891 non-null    bool   
INFO:pipeline: 19  CabinLetter_F        891 non-null    bool   
INFO:pipeline: 20  CabinLetter_G        891 non-null    bool   
INFO:pipeline: 21  CabinLetter_T        891 non-null    bool   
INFO:pipeline: 22  CabinLetter_missing  891 non-null    bool   
INFO:pipeline: 23  CabinLetterImputed   891 non-null    bool   
INFO:pipeline: 24  CabinNumber          891 non-null    int64  
INFO:pipeline: 25  CabinNumberImputed   891 non-null    bool   
INFO:pipeline:dtypes: bool(18), float64(2), int64(6)
INFO:pipeline:             count        mean         std   min       25%       50%    75%       max
INFO:pipeline:PassengerId  891.0  446.000000  257.353842  1.00  223.5000  446.0000  668.5  891.0000
INFO:pipeline:Survived     891.0    0.383838    0.486592  0.00    0.0000    0.0000    1.0    1.0000
INFO:pipeline:Pclass       891.0    2.308642    0.836071  1.00    2.0000    3.0000    3.0    3.0000
INFO:pipeline:Age          891.0   29.361582   13.019697  0.42   22.0000   28.0000   35.0   80.0000
INFO:pipeline:SibSp        891.0    0.523008    1.102743  0.00    0.0000    0.0000    1.0    8.0000
INFO:pipeline:Parch        891.0    0.381594    0.806057  0.00    0.0000    0.0000    0.0    6.0000
INFO:pipeline:Fare         891.0   32.204208   49.693429  0.00    7.9104   14.4542   31.0  512.3292
INFO:pipeline:CabinNumber  891.0   11.021324   26.638204  0.00    0.0000    0.0000    0.0  148.0000
INFO:pipeline:
INFO:pipeline:* Save cleaned dataframe to file.
INFO:pipeline:---------------------------------
INFO:pipeline:./output/titanic_cleaned.csv
